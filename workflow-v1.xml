<?xml version="1.0" encoding="UTF-8"?>
<ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
   <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:618ac202-acf6-4695-bdc6-ca0078be3649" author="Marco Roos (AID)" title="BioAID_DiseaseDiscovery">This workflow finds disease relevant to the query string via the following steps:
1. A user query: a list of terms or boolean query - look at the Apache Lucene project for all details. E.g.: (EZH2 OR "Enhancer of Zeste" +(mutation chromatin) -clinical)
2. Retrieve documents: finds relevant documents (abstract+title) based on query (edit maxHits to change the default maximum number of documents returned; the AIDA service inside is based on Apache Lucene)
3. Discover proteins: extract proteins discovered in the set of relevant abstracts  (with a 'named entity recognizer' trained on genomic terms using a Bayesian approach; the AIDA service inside is based on LingPipe)
4. Link proteins to disease contained in the OMIM disease database (with a service from Japan that interrogates OMIM)

Workflow by Marco Roos (AID = Adaptive Information Disclosure, University of Amsterdam; http://adaptivedisclosure.org)

Text mining services by Sophia Katrenko and Edgar Meij (AID)
OMIM service from the Center for Information Biology and DNA Data Bank of Japan, National Institute of Genetics, director Hideaki Sugawara (see http://xml.nig.ac.jp)

Workflow URL: http://adaptivedisclosure.org/workflows/BioAID/BioAID_DiseaseDiscovery.xml</ds:workflowdescription>
  <ds:program name="Document_index">
  </ds:program>
  <ds:program name="search_field">
  </ds:program>
  <ds:program name="maxHits">
  </ds:program>
  <ds:program name="Remove_xml_tag">
  </ds:program>
  <ds:program name="Flatten_and_make_unique">
    <ds:workflow>
      <ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
        <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:f43db36c-a3ed-4f78-8d1c-89f27dfb53f7" author="" title="Flatten_and_make_unique" />
        <ds:program name="Remove_duplicate_strings">
        </ds:program>
        <ds:program name="Flatten_list">
        </ds:program>
        <ds:controller source="input" target="Flatten_list:inputlist" />
        <ds:controller source="Flatten_list:outputlist" target="Remove_duplicate_strings:stringlist" />
        <ds:controller source="Remove_duplicate_strings:strippedlist" target="flattened_unique_output" />
        <ds:inport name="input" />
        <ds:outport name="flattened_unique_output" />
      </ds:weprov>
    </ds:workflow>
  </ds:program>
  <ds:program name="Link_proteins_to_diseases">
    <ds:workflow>
      <ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
        <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:4dccdaac-5994-4350-b30b-28eac86c229a" author="" title="Link_protein_to_OMIM_disease" />
        <ds:program name="filter_disease_regexp">
        </ds:program>
        <ds:program name="split_OMIM_regexp">
        </ds:program>
        <ds:program name="Flatten_list">
        </ds:program>
        <ds:program name="Remove_duplicate_strings">
        </ds:program>
        <ds:program name="Extract_diseases_from_OMIM">
        </ds:program>
        <ds:program name="search">
        </ds:program>
        <ds:program name="Split_OMIM_results">
        </ds:program>
        <ds:program name="label_OMIM_disease">
        </ds:program>
        <ds:controller source="keyword" target="search:keyword" />
        <ds:controller source="Extract_diseases_from_OMIM:filteredlist" target="label_OMIM_disease:OMIM_disease_string" />
        <ds:controller source="Flatten_list:outputlist" target="Remove_duplicate_strings:stringlist" />
        <ds:controller source="Remove_duplicate_strings:strippedlist" target="OMIM_disease_label" />
        <ds:controller source="Split_OMIM_results:split" target="Extract_diseases_from_OMIM:stringlist" />
        <ds:controller source="filter_disease_regexp:value" target="Extract_diseases_from_OMIM:regex" />
        <ds:controller source="label_OMIM_disease:OMIM_disease_label" target="Flatten_list:inputlist" />
        <ds:controller source="search:Result" target="Split_OMIM_results:string" />
        <ds:controller source="split_OMIM_regexp:value" target="Split_OMIM_results:regex" />
        <ds:inport name="keyword" />
        <ds:outport name="OMIM_disease_label">
        </ds:outport>
      </ds:weprov>
    </ds:workflow>
  </ds:program>
  <ds:program name="Discover_proteins">
    <ds:description>This workflow applies the discovery workflow built around the AIDA 'Named Entity Recognize' web service by Sophia Katrenko. It uses the pre-learned genomics model, named 'MedLine', to find genomics concepts in a set of documents in lucene output format.</ds:description>
    <ds:workflow>
      <ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
        <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:b4c1a118-6a38-40b5-99e9-febbd3c85f2b" author="Marco Roos (AID)" title="Discover_proteins">This workflow applies the discovery workflow built around the AIDA 'Named Entity Recognize' web service by Sophia Katrenko. It uses the pre-learned genomics model, named 'MedLine', to find genomics concepts in a set of documents in lucene output format.</ds:workflowdescription>
        <ds:program name="prelearned_genomics_model">
        </ds:program>
        <ds:program name="Extract_proteins">
          <ds:description>This workflow filters protein_molecule-labeled terms from an input string(list). The result is a tagged list of proteins (disregarding false positives in the input).

Internal information:
This workflow is a copy of 'filter_protein_molecule_MR3' used for the NBIC poster (now in Archive).</ds:description>
          <ds:workflow>
            <ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
              <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:df6063f9-b469-4d56-aecc-a62db4bcb3ad" author="Marco Roos (AID)" title="Extract_proteins">This workflow filters protein_molecule-labeled terms from an input string(list). The result is a tagged list of proteins (disregarding false positives in the input).

Internal information:
This workflow is a copy of 'filter_protein_molecule_MR3' used for the NBIC poster (now in Archive).</ds:workflowdescription>
              <ds:program name="Remove_duplicate_strings">
                </ds:program>
              <ds:program name="Filter_protein_molecules">
               </ds:program>
              <ds:program name="splitOn_protein_molecule_regexp">
              </ds:program>
              <ds:program name="filter_protein_molecule_regexp">
              </ds:program>
              <ds:program name="SplitOn_protein_molecule">
              </ds:program>
              <ds:controller source="input_string" target="SplitOn_protein_molecule:string" />
              <ds:controller source="Filter_protein_molecules:filteredlist" target="Remove_duplicate_strings:stringlist" />
              <ds:controller source="SplitOn_protein_molecule:split" target="Filter_protein_molecules:stringlist" />
              <ds:controller source="filter_protein_molecule_regexp:value" target="Filter_protein_molecules:regex" />
              <ds:controller source="splitOn_protein_molecule_regexp:value" target="SplitOn_protein_molecule:regex" />
              <ds:controller source="Remove_duplicate_strings:strippedlist" target="protein_molecule_list" />
              <ds:inport name="input_string" />
              <ds:outport name="protein_molecule_list">
              </ds:outport>
            </ds:weprov>
          </ds:workflow>
        </ds:program>
        <ds:program name="Discover_entities">
          <ds:description>This workflow contains the 'Named Entity Recognize' web service from the AIDA toolbox, created by Sophia Katrenko. It can be used to discover entities of a certain type (determined by 'learned_model') in documents provided in a lucene output format.</ds:description>
          <ds:workflow>
            <ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
              <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:e7ae8f2a-428f-4afd-93eb-52ccb89273e1" author="Marco Roos (AID)" title="Discover_entities">This workflow contains the 'Named Entity Recognize' web service from the AIDA toolbox, created by Sophia Katrenko. It can be used to discover entities of a certain type (determined by 'learned_model') in documents provided in a lucene output format.

Known issues:
The output of NErecognize contains concepts with / characters, breaking the xml. For post-processing its results it is better to use string manipulation than xml manipulations.
The output is per document, which means entities will  be redundant if they occur in more than one document.</ds:workflowdescription>
              <ds:program name="Default_output_type">
              </ds:program>
              <ds:program name="Default_input_type">
              </ds:program>
              <ds:program name="NErecognize">
              </ds:program>
              <ds:controller source="input_from_lucene" target="NErecognize:input_data" />
              <ds:controller source="learned_model" target="NErecognize:r_type" />
              <ds:controller source="Default_input_type:value" target="NErecognize:input_type" />
              <ds:controller source="Default_output_type:value" target="NErecognize:output_type" />
              <ds:controller source="NErecognize:NErecognizeReturn" target="discovered_entities" />
              <ds:inport name="input_from_lucene" />
              <ds:inport name="learned_model">
              </ds:inport>
              <ds:outport name="discovered_entities">
              </ds:outport>
            </ds:weprov>
          </ds:workflow>
        </ds:program>
        <ds:controller source="documents_from_lucene" target="Discover_entities:input_from_lucene" />
        <ds:controller source="Discover_entities:discovered_entities" target="Extract_proteins:input_string" />
        <ds:controller source="prelearned_genomics_model:value" target="Discover_entities:learned_model" />
        <ds:controller source="Extract_proteins:protein_molecule_list" target="discovered_proteins" />
        <ds:inport name="documents_from_lucene" />
        <ds:outport name="discovered_proteins">
        </ds:outport>
      </ds:weprov>
    </ds:workflow>
  </ds:program>
  <ds:program name="Retrieve_documents">
    <ds:description>This workflow retrieves relevant documents, based on a query optimized by adding a string to the original query that will rank the search output according to the most recent years. The added string adds years with priorities (most recent is highest); it starts at 2007.</ds:description>
    <ds:workflow>
      <ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
        <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:dd1e2961-a1ca-4902-9bfb-2b776a4399ee" author="Marco Roos (AID)" title="Retrieve_bio_documents">This workflow retrieves relevant documents, based on a query optimized by adding a string to the original query that will rank the search output according to the most recent years. The added string adds years with priorities (most recent is highest); it starts at 2007.</ds:workflowdescription>
        <ds:program name="Biooptimize_query">
          <ds:description>This workflow does four things:
1. it retrieves documents relevant for the query string
2. it discovers entities in those documents, these are considered relevant entities
3. it filters proteins from those entities (on the tag protein_molecule)
4. it removes all terms from the list produced by 3 (query terms temporarily considered proteins)

ToDo
* Replace step 4 by the following procedure:
  1. remove the query terms from the output of NER (probably by a regexp matching on what is inside the tag, possibly case-insensitive)
  2. remove tag_as_protein_molecule (obsolete)
* Add synonym service/workflow

Note that Remove_inputquery has an alternative iteration strategy (dot product instead of cross product). Idem for 'Join' in 'SplitQuery'.</ds:description>
          <ds:workflow>
            <ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
              <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:3d2eebb7-0b04-4979-9aa9-3d39b1464216" author="Marco Roos" title="Lucene_bioquery_optimizer_MR1">This workflow does four things:
1. it retrieves documents relevant for the query string
2. it discovers entities in those documents, these are considered relevant entities
3. it filters proteins from those entities (on the tag protein_molecule)
4. it removes all terms from the list produced by 3 (query terms temporarily considered proteins)

ToDo
* Replace step 4 by the following procedure:
  1. remove the query terms from the output of NER (probably by a regexp matching on what is inside the tag, possibly case-insensitive)
  2. remove tag_as_protein_molecule (obsolete)
* Add synonym service/workflow

Note that Remove_inputquery has an alternative iteration strategy (dot product instead of cross product). Idem for 'Join' in 'SplitQuery'.</ds:workflowdescription>
              <ds:program name="Lucene_year_priorities">
              </ds:program>
              <ds:program name="Prioritise_lucene_query">
              </ds:program>
              <ds:controller source="Lucene_year_priorities:value" target="Prioritise_lucene_query:priority_string" />
              <ds:controller source="query_string" target="Prioritise_lucene_query:query_string" />
              <ds:controller source="Prioritise_lucene_query:lucene_query" target="optimized_lucene_query" />
              <ds:inport name="query_string">
              </ds:inport>
              <ds:outport name="optimized_lucene_query" />
            </ds:weprov>
          </ds:workflow>
        </ds:program>
        <ds:program name="Retrieve">
          <ds:description>This workflow applies the search web service from the AIDA toolbox.

Comments:
This search service is based on lucene defaults; it may be necessary to optimize the querystring to adopt the behaviour to what is most relevant in a particular domain (e.g. for medline prioritizing based on publication date is useful). Lucene favours shorter sentences, which may be bad for subsequent information extraction.</ds:description>
          <ds:workflow>
            <ds:weprov xmlns:ds="http://www.csiro.au/digiscape/" version="0.1">
              <ds:workflowdescription id="urn:lsid:net.sf.taverna:wfDefinition:858efe24-26c0-4090-be46-c9a5b4f21cad" author="Marco Roos" title="Retrieve_documents_MR1">This workflow applies the search web service from the AIDA toolbox.

Comments:
This search service is based on lucene defaults; it may be necessary to optimize the querystring to adopt the behaviour to what is most relevant in a particular domain (e.g. for medline prioritizing based on publication date is useful). Lucene favours shorter sentences, which may be bad for subsequent information extraction.</ds:workflowdescription>
              <ds:program name="search">
              </ds:program>
              <ds:controller source="document_index" target="search:index" />
              <ds:controller source="maxHits" target="search:maxHits" />
              <ds:controller source="queryString" target="search:queryString" />
              <ds:controller source="search_field" target="search:defaultField" />
              <ds:controller source="search:searchReturn" target="relevant_documents" />
              <ds:inport name="queryString" />
              <ds:inport name="document_index" />
              <ds:inport name="search_field" />
              <ds:inport name="maxHits" />
              <ds:outport name="relevant_documents">
              </ds:outport>
            </ds:weprov>
          </ds:workflow>
        </ds:program>
        <ds:controller source="query_string" target="Biooptimize_query:query_string" />
        <ds:controller source="Biooptimize_query:optimized_lucene_query" target="Retrieve:queryString" />
        <ds:controller source="document_index" target="Retrieve:document_index" />
        <ds:controller source="maxHits" target="Retrieve:maxHits" />
        <ds:controller source="search_field" target="Retrieve:search_field" />
        <ds:controller source="Retrieve:relevant_documents" target="relevant_documents" />
        <ds:inport name="query_string" />
        <ds:inport name="document_index" />
        <ds:inport name="search_field" />
        <ds:inport name="maxHits" />
        <ds:outport name="relevant_documents">
        </ds:outport>
      </ds:weprov>
    </ds:workflow>
  </ds:program>
  <ds:controller source="query_string" target="Retrieve_documents:query_string" />
  <ds:controller source="Discover_proteins:discovered_proteins" target="Remove_xml_tag:tagged_term" />
  <ds:controller source="Document_index:value" target="Retrieve_documents:document_index" />
  <ds:controller source="Link_proteins_to_diseases:OMIM_disease_label" target="Flatten_and_make_unique:input" />
  <ds:controller source="Remove_xml_tag:term" target="Link_proteins_to_diseases:keyword" />
  <ds:controller source="Retrieve_documents:relevant_documents" target="Discover_proteins:documents_from_lucene" />
  <ds:controller source="maxHits:value" target="Retrieve_documents:maxHits" />
  <ds:controller source="search_field:value" target="Retrieve_documents:search_field" />
  <ds:controller source="Discover_proteins:discovered_proteins" target="discovered_proteins" />
  <ds:controller source="Flatten_and_make_unique:flattened_unique_output" target="discovered_diseases" />
  <ds:controller source="Retrieve_documents:relevant_documents" target="relevant_documents" />
  <ds:inport name="query_string">
  </ds:inport>
  <ds:outport name="relevant_documents" />
  <ds:outport name="discovered_proteins">
  </ds:outport>
  <ds:outport name="discovered_diseases" />
</ds:weprov>